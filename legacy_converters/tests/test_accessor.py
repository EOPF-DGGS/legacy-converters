import numpy as np
import pyproj
import pytest
import xarray as xr


@pytest.fixture
def eopf_utm():
    group1 = xr.Dataset(
        coords={
            "y": np.array(
                [5399990, 5383990, 5367990, 5351990, 5335990, 5319990, 5303990]
            ),
            "x": np.array([300010, 316010, 332010, 348010, 364010, 380010, 396010]),
        },
    )
    group2 = xr.Dataset(
        coords={
            "y": np.array([5399970, 5351970, 5303970]),
            "x": np.array([300030, 348030, 396030]),
        }
    )
    root = xr.Dataset(attrs={"other_metadata": {"horizontal_CRS_code": 32630}})

    return xr.DataTree.from_dict({"/": root, "group1": group1, "group2": group2})


@pytest.fixture
def eopf_wgs84(eopf_utm):
    lon1 = np.array(
        [
            [
                -5.719217839775534,
                -5.711492612487776,
                -5.703828063656543,
                -5.696223585659075,
                -5.6886785792841374,
                -5.681192453589132,
                -5.673764625760122,
            ],
            [
                -5.5018954581734665,
                -5.4947860061885105,
                -5.487732409761259,
                -5.4807341093413084,
                -5.473790553127891,
                -5.466901196938149,
                -5.460065504078113,
            ],
            [
                -5.284516654916013,
                -5.278023545645481,
                -5.271581461150202,
                -5.265189890086588,
                -5.258848328196042,
                -5.252556278184471,
                -5.2463132496042615,
            ],
            [
                -5.067086309553923,
                -5.06121006152846,
                -5.055380000288239,
                -5.049595662819481,
                -5.043856592526233,
                -5.038162339121177,
                -5.032512458518671,
            ],
            [
                -4.8496093089706305,
                -4.8443503917143484,
                -4.839132816724388,
                -4.833956169428243,
                -4.8288200410017845,
                -4.823724028271424,
                -4.818667733618262,
            ],
            [
                -4.632090546691889,
                -4.627449380608566,
                -4.622844706424727,
                -4.618276158109018,
                -4.613743374706968,
                -4.609246000254549,
                -4.604783683693496,
            ],
            [
                -4.414534922192992,
                -4.410511878464106,
                -4.406520471103035,
                -4.402560382707823,
                -4.398631300280099,
                -4.394732915150067,
                -4.390864922903036,
            ],
        ],
        dtype="float64",
    )
    lat1 = np.array(
        [
            [
                48.72082821728411,
                48.577051361145685,
                48.43326998330289,
                48.289484091077775,
                48.14569369175223,
                48.001898792570174,
                47.85809940073993,
            ],
            [
                48.72575519853214,
                48.581953637643124,
                48.438147693820916,
                48.29433737290381,
                48.15052268070999,
                48.00670362303941,
                47.86288020567574,
            ],
            [
                48.73027253906812,
                48.586448323235444,
                48.44261985178995,
                48.29878712920793,
                48.15495015996396,
                48.011108948532495,
                47.867263499389495,
            ],
            [
                48.73437998812001,
                48.59053516950136,
                48.44668621110982,
                48.30283311618189,
                48.158975887969135,
                48.0151145297395,
                47.871249044778615,
            ],
            [
                48.73807731757189,
                48.59421395046422,
                48.450346547916126,
                48.30647511204701,
                48.162599645006445,
                48.01872014897526,
                47.87483662616659,
            ],
            [
                48.7413643220047,
                48.59748446263211,
                48.45360066061973,
                48.30971291709299,
                48.1658212332209,
                48.021925610216975,
                47.87802604934005,
            ],
            [
                48.74424081873279,
                48.60034652503381,
                48.45644836994222,
                48.31254635371287,
                48.168640476656066,
                48.02473073913812,
                47.88081714158214,
            ],
        ],
        dtype="float64",
    )

    lon2 = np.array(
        [
            [-5.718936530344232, -5.695944792637786, -5.6734882893110905],
            [-5.066807118040187, -5.049318939665552, -5.032238145234274],
            [-4.414257908925475, -4.402285787898621, -4.390592689486813],
        ],
        dtype="float64",
    )
    lat2 = np.array(
        [
            [48.72065491331985, 48.28931067423311, 47.857925872687595],
            [48.73420506236285, 48.302658101913416, 47.87107394324772],
            [48.74406429191886, 48.31236976243821, 47.88064048668145],
        ],
        dtype="float64",
    )

    lon_attrs = {
        "standard_name": "longitude",
        "axis": "X",
        "long_name": "longitude coordinate",
        "units": "degrees_east",
    }
    lat_attrs = {
        "standard_name": "latitude",
        "axis": "Y",
        "long_name": "latitude coordinate",
        "units": "degrees_north",
    }
    group1_coords = {
        "lon": (["x", "y"], lon1, lon_attrs),
        "lat": (["x", "y"], lat1, lat_attrs),
    }
    group2_coords = {
        "lon": (["x", "y"], lon2, lon_attrs),
        "lat": (["x", "y"], lat2, lat_attrs),
    }

    return xr.DataTree.from_dict(
        {
            "/": eopf_utm["/"].ds,
            "group1": eopf_utm["group1"].ds.assign_coords(group1_coords),
            "group2": eopf_utm["group2"].ds.assign_coords(group2_coords),
        }
    )


class TestAccessor:
    def test_crs(self, eopf_utm):
        actual = eopf_utm.grid4earth.crs

        expected = pyproj.CRS.from_epsg(32630)

        assert actual == expected

    def test_convert_to(self, eopf_utm, eopf_wgs84):
        actual = eopf_utm.grid4earth.convert_to(4326)

        xr.testing.assert_identical(actual, eopf_wgs84)
